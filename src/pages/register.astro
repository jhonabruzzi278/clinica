---
import Layout from "~/layouts/MainLayout.astro";

// Simulación simple - sin validaciones reales
let message = '';
let messageType = '';

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const nombre = formData.get("nombre")?.toString();
  const apellidoPaterno = formData.get("apellidoPaterno")?.toString();
  const apellidoMaterno = formData.get("apellidoMaterno")?.toString();
  const email = formData.get("email")?.toString();
  const telefono = formData.get("telefono")?.toString();
  const rut = formData.get("rut")?.toString();
  const dv = formData.get("dv")?.toString(); // Dígito verificador separado
  const fechaNacimiento = formData.get("fechaNacimiento")?.toString();
  const password = formData.get("password")?.toString();
  const confirmPassword = formData.get("confirmPassword")?.toString();
  const terminos = formData.get("terminos")?.toString();

  // Validación básica de simulación
  if (!nombre || !apellidoPaterno || !email || !telefono || !rut || !dv || !fechaNacimiento || !password || !confirmPassword || !terminos) {
    message = 'Por favor completa todos los campos obligatorios.';
    messageType = 'error';
  } else if (password !== confirmPassword) {
    message = 'Las contraseñas no coinciden.';
    messageType = 'error';
  } else {
    // Validación de fecha de nacimiento
    const fechaNac = new Date(fechaNacimiento);
    const fechaActual = new Date();
    const fechaMinima = new Date('1920-01-01');
    const edad = fechaActual.getFullYear() - fechaNac.getFullYear();
    
    if (fechaNac < fechaMinima) {
      message = 'La fecha de nacimiento no puede ser anterior a 1920.';
      messageType = 'error';
    } else if (fechaNac > fechaActual) {
      message = 'La fecha de nacimiento no puede ser futura.';
      messageType = 'error';
    } else if (edad < 18) {
      message = 'Debes ser mayor de 18 años para registrarte.';
      messageType = 'error';
    } else {
      // Simulación exitosa
      message = '¡Cuenta creada exitosamente! Redirigiendo...';
      messageType = 'success';
      // En una implementación real, aquí crearías el usuario en Supabase
      console.log('Datos del usuario:', {
        nombre,
        apellidoPaterno,
        apellidoMaterno: apellidoMaterno || null,
        email,
        telefono,
        rut,
        dv,
        fechaNacimiento
      });
      return Astro.redirect("/contacto");
    }
  }
}
---

<Layout title="Crear Cuenta - Clínica Linda Sonrisa">
  <main class="min-h-screen bg-gradient-to-br from-teal-50 to-blue-50 py-8 px-4">
    <div class="max-w-2xl mx-auto">
      
      <!-- Header -->
      <div class="text-center mb-8">
        <div class="inline-flex items-center justify-center w-20 h-20 bg-teal-600 rounded-full mb-6 shadow-lg">
          <svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z"></path>
          </svg>
        </div>
        <h1 class="text-3xl md:text-4xl font-bold text-teal-700 mb-2">
          Crear cuenta
        </h1>
        <p class="text-gray-600 text-lg">
          Únete a nuestra clínica y agenda tus citas fácilmente
        </p>
      </div>

      <!-- Mensaje de estado -->
      {message && (
        <div class={`mb-6 p-4 rounded-xl border-2 ${
          messageType === 'success' 
            ? 'bg-green-50 border-green-200 text-green-800' 
            : 'bg-red-50 border-red-200 text-red-800'
        }`}>
          <div class="flex items-center gap-3">
            <svg class={`w-6 h-6 ${messageType === 'success' ? 'text-green-600' : 'text-red-600'}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
              {messageType === 'success' ? (
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              ) : (
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              )}
            </svg>
            <span class="font-semibold">{message}</span>
          </div>
        </div>
      )}

      <!-- Formulario de registro -->
      <div class="bg-white rounded-3xl shadow-xl p-8 border border-teal-100">
        
        <!-- Botón de Google -->
        <button 
          onclick="registerWithGoogle()"
          class="w-full bg-white hover:bg-gray-50 border-2 border-gray-200 hover:border-gray-300 text-gray-700 font-semibold py-4 px-8 rounded-xl transition-all duration-300 shadow-md hover:shadow-lg flex items-center justify-center gap-3 text-lg mb-6"
        >
          <svg class="w-6 h-6" viewBox="0 0 24 24">
            <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
            <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
            <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
            <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
          </svg>
          Registrarse con Google
        </button>

        <!-- Separador -->
        <div class="relative my-6">
          <div class="absolute inset-0 flex items-center">
            <div class="w-full border-t border-gray-200"></div>
          </div>
          <div class="relative flex justify-center text-sm">
            <span class="px-4 bg-white text-gray-500">o completa el formulario</span>
          </div>
        </div>

        <form method="POST" class="space-y-6">
          
          <!-- Nombre -->
          <div class="group">
            <label for="nombre" class="block text-sm font-semibold text-gray-700 mb-3">
              Nombre *
            </label>
            <div class="relative">
              <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                <svg class="w-5 h-5 text-gray-400 group-hover:text-teal-500 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
              </div>
              <input 
                type="text" 
                id="nombre"
                name="nombre" 
                placeholder="Tu nombre" 
                required 
                class="w-full pl-12 pr-4 py-4 border-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-teal-500 focus:border-teal-500 transition-all duration-300 group-hover:border-teal-300 text-lg"
              />
            </div>
          </div>

          <!-- Apellidos -->
          <div class="grid md:grid-cols-2 gap-6">
            <div class="group">
              <label for="apellidoPaterno" class="block text-sm font-semibold text-gray-700 mb-3">
                Apellido Paterno *
              </label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                  <svg class="w-5 h-5 text-gray-400 group-hover:text-teal-500 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                  </svg>
                </div>
                <input 
                  type="text" 
                  id="apellidoPaterno"
                  name="apellidoPaterno" 
                  placeholder="Apellido paterno" 
                  required 
                  class="w-full pl-12 pr-4 py-4 border-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-teal-500 focus:border-teal-500 transition-all duration-300 group-hover:border-teal-300 text-lg"
                />
              </div>
            </div>

            <div class="group">
              <label for="apellidoMaterno" class="block text-sm font-semibold text-gray-700 mb-3">
                Apellido Materno <span class="text-xs text-gray-500">(opcional)</span>
              </label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                  <svg class="w-5 h-5 text-gray-400 group-hover:text-teal-500 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                  </svg>
                </div>
                <input 
                  type="text" 
                  id="apellidoMaterno"
                  name="apellidoMaterno" 
                  placeholder="Apellido materno" 
                  class="w-full pl-12 pr-4 py-4 border-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-teal-500 focus:border-teal-500 transition-all duration-300 group-hover:border-teal-300 text-lg"
                />
              </div>
            </div>
          </div>

          <!-- Email -->
          <div class="group">
            <label for="email" class="block text-sm font-semibold text-gray-700 mb-3">
              Correo electrónico *
            </label>
            <div class="relative">
              <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                <svg class="w-5 h-5 text-gray-400 group-hover:text-teal-500 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                </svg>
              </div>
              <input 
                type="email" 
                id="email"
                name="email" 
                placeholder="tu@email.com" 
                required 
                class="w-full pl-12 pr-4 py-4 border-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-teal-500 focus:border-teal-500 transition-all duration-300 group-hover:border-teal-300 text-lg"
              />
            </div>
          </div>

          <!-- Teléfono y RUT -->
          <div class="grid md:grid-cols-2 gap-6">
            <div class="group">
              <label for="telefono" class="block text-sm font-semibold text-gray-700 mb-3">
                Teléfono *
              </label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                  <svg class="w-5 h-5 text-gray-400 group-hover:text-teal-500 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                  </svg>
                </div>
                <input 
                  type="tel" 
                  id="telefono"
                  name="telefono" 
                  placeholder="+56 9 1234 5678" 
                  required 
                  class="w-full pl-12 pr-4 py-4 border-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-teal-500 focus:border-teal-500 transition-all duration-300 group-hover:border-teal-300 text-lg"
                />
              </div>
            </div>

            <div class="group">
              <label for="rut" class="block text-sm font-semibold text-gray-700 mb-3">
                RUT *
              </label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                  <svg class="w-5 h-5 text-gray-400 group-hover:text-teal-500 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V8a2 2 0 00-2-2h-5m-4 0V4a2 2 0 114 0v2m-4 0a2 2 0 104 0m-5 8a2 2 0 100-4 2 2 0 000 4zm0 0c1.306 0 2.417.835 2.83 2M9 14a3.001 3.001 0 00-2.83 2M15 11h3m-3 4h2"></path>
                  </svg>
                </div>
                <input 
                  type="text" 
                  id="rut"
                  name="rut" 
                  placeholder="12.345.678" 
                  required 
                  class="w-full pl-12 pr-16 py-4 border-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-teal-500 focus:border-teal-500 transition-all duration-300 group-hover:border-teal-300 text-lg"
                />
                <!-- Indicador del dígito verificador -->
                <div class="absolute inset-y-0 right-0 pr-4 flex items-center">
                  <span id="digitoVerificador" class="text-lg font-bold text-teal-600"></span>
                </div>
              </div>
              <!-- Campo oculto para el dígito verificador -->
              <input type="hidden" id="dv" name="dv" value="" />
            </div>
          </div>

          <!-- Fecha de nacimiento -->
          <div class="group">
            <label for="fechaNacimiento" class="block text-sm font-semibold text-gray-700 mb-3">
              Fecha de nacimiento *
            </label>
            <div class="relative">
              <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                <svg class="w-5 h-5 text-gray-400 group-hover:text-teal-500 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
              </div>
              <input 
                type="date" 
                id="fechaNacimiento"
                name="fechaNacimiento" 
                required 
                min="1920-01-01"
                max={new Date().toISOString().split('T')[0]}
                class="w-full pl-12 pr-4 py-4 border-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-teal-500 focus:border-teal-500 transition-all duration-300 group-hover:border-teal-300 text-lg"
              />
            </div>
            <p class="text-xs text-gray-500 mt-2">
              Debes ser mayor de 18 años para registrarte
            </p>
          </div>

          <!-- Contraseñas -->
          <div class="grid md:grid-cols-2 gap-6">
            <div class="group">
              <label for="password" class="block text-sm font-semibold text-gray-700 mb-3">
                Contraseña *
              </label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                  <svg class="w-5 h-5 text-gray-400 group-hover:text-teal-500 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                  </svg>
                </div>
                <input 
                  type="password" 
                  id="password"
                  name="password" 
                  placeholder="Mínimo 8 caracteres" 
                  required 
                  minlength="8"
                  class="w-full pl-12 pr-4 py-4 border-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-teal-500 focus:border-teal-500 transition-all duration-300 group-hover:border-teal-300 text-lg"
                />
              </div>
              <!-- Indicador de fortaleza de contraseña -->
              <div id="passwordStrength" class="mt-2 hidden">
                <div class="flex space-x-1 mt-2">
                  <div id="strength-1" class="h-1 flex-1 rounded bg-gray-200"></div>
                  <div id="strength-2" class="h-1 flex-1 rounded bg-gray-200"></div>
                  <div id="strength-3" class="h-1 flex-1 rounded bg-gray-200"></div>
                  <div id="strength-4" class="h-1 flex-1 rounded bg-gray-200"></div>
                </div>
                <p id="strengthText" class="text-xs text-gray-500 mt-1"></p>
              </div>
            </div>

            <div class="group">
              <label for="confirmPassword" class="block text-sm font-semibold text-gray-700 mb-3">
                Confirmar contraseña *
              </label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                  <svg class="w-5 h-5 text-gray-400 group-hover:text-teal-500 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </div>
                <input 
                  type="password" 
                  id="confirmPassword"
                  name="confirmPassword" 
                  placeholder="Repite tu contraseña" 
                  required 
                  minlength="8"
                  class="w-full pl-12 pr-4 py-4 border-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-teal-500 focus:border-teal-500 transition-all duration-300 group-hover:border-teal-300 text-lg"
                />
                <!-- Indicador de coincidencia -->
                <div class="absolute inset-y-0 right-0 pr-4 flex items-center">
                  <span id="passwordMatch" class="text-sm"></span>
                </div>
              </div>
              <p id="passwordMatchText" class="text-xs mt-2 hidden"></p>
            </div>
          </div>

          <!-- Términos y condiciones -->
          <div class="flex items-start gap-3">
            <input 
              type="checkbox" 
              id="terminos"
              name="terminos" 
              value="accepted"
              required
              class="w-5 h-5 text-teal-600 border-2 border-gray-300 rounded focus:ring-teal-500 mt-1"
            >
            <label for="terminos" class="text-sm text-gray-700 leading-relaxed">
              Acepto los <a href="/terminos" class="text-teal-600 hover:text-teal-700 font-semibold underline">términos y condiciones</a> 
              y autorizo el tratamiento de mis datos personales conforme a la 
              <a href="/privacidad" class="text-teal-600 hover:text-teal-700 font-semibold underline">política de privacidad</a>.
            </label>
          </div>

          <!-- Botón de registro -->
          <button 
            type="submit"
            class="w-full bg-gradient-to-r from-teal-600 to-teal-700 hover:from-teal-700 hover:to-teal-800 text-white font-bold py-4 px-8 rounded-xl transition-all duration-300 shadow-lg hover:shadow-2xl transform hover:scale-[1.02] flex items-center justify-center gap-3 text-lg"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z"></path>
            </svg>
            Crear mi cuenta
          </button>
        </form>

        <!-- Separador -->
        <div class="relative my-8">
          <div class="absolute inset-0 flex items-center">
            <div class="w-full border-t border-gray-200"></div>
          </div>
          <div class="relative flex justify-center text-sm">
            <span class="px-4 bg-white text-gray-500">¿Ya tienes cuenta?</span>
          </div>
        </div>

        <!-- Link a login -->
        <div class="text-center">
          <a 
            href="/login" 
            class="inline-flex items-center gap-2 text-teal-600 hover:text-teal-700 font-semibold text-lg transition-colors"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1"></path>
            </svg>
            Inicia sesión aquí
          </a>
        </div>
      </div>

      <!-- Demo info -->
      <div class="mt-6 bg-blue-50 border border-blue-200 rounded-xl p-4">
        <div class="flex items-start gap-3">
          <svg class="w-5 h-5 text-blue-600 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <div>
            <h3 class="font-semibold text-blue-800 mb-1">Modo Demo</h3>
            <p class="text-sm text-blue-700">
              Prueba con RUT: <strong>19009971</strong> - Se calculará automáticamente el dígito verificador: <strong>9</strong>
            </p>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  // Función para simular registro con Google
  function registerWithGoogle() {
    alert('Simulación: Registro con Google exitoso');
    window.location.href = '/contacto';
  }

  // Función para calcular el dígito verificador del RUT chileno
  function calcularDigitoVerificador(rut: string): string {
    const rutLimpio = rut.replace(/[^\d]/g, '');
    
    if (rutLimpio.length < 7 || rutLimpio.length > 8) {
      return '';
    }

    const rutInvertido = rutLimpio.split('').reverse().join('');
    const serie = [2, 3, 4, 5, 6, 7];
    let suma = 0;
    
    for (let i = 0; i < rutInvertido.length; i++) {
      const digito = parseInt(rutInvertido[i]);
      const multiplicador = serie[i % serie.length];
      suma += digito * multiplicador;
    }
    
    const resto = suma % 11;
    
    switch (resto) {
      case 1: return '9';
      case 2: return '8';
      case 3: return '7';
      case 4: return '6';
      case 5: return '5';
      case 6: return '4';
      case 7: return '3';
      case 8: return '2';
      case 9: return '1';
      case 10: return 'K';
      case 0: return '0';
      default: return '';
    }
  }

  // Función para formatear RUT con puntos
  function formatearRUT(rut: string): string {
    const numeros = rut.replace(/[^\d]/g, '');
    
    if (numeros.length <= 1) return numeros;
    if (numeros.length <= 4) return numeros;
    if (numeros.length <= 7) {
      return numeros.slice(0, -3) + '.' + numeros.slice(-3);
    }
    return numeros.slice(0, -6) + '.' + numeros.slice(-6, -3) + '.' + numeros.slice(-3);
  }

  // Función para validar fortaleza de contraseña
  function validatePasswordStrength(password: string): { score: number; text: string; color: string } {
    let score = 0;
    
    if (password.length >= 8) score++;
    if (/[a-z]/.test(password)) score++;
    if (/[A-Z]/.test(password)) score++;
    if (/[0-9]/.test(password)) score++;
    if (/[^A-Za-z0-9]/.test(password)) score++;
    
    const results = [
      { text: 'Muy débil', color: 'bg-red-500' },
      { text: 'Débil', color: 'bg-orange-500' },
      { text: 'Regular', color: 'bg-yellow-500' },
      { text: 'Buena', color: 'bg-blue-500' },
      { text: 'Fuerte', color: 'bg-green-500' }
    ];
    
    return { score, ...results[Math.min(score, 4)] };
  }

  // Función para validar fecha de nacimiento
  function validateBirthDate(dateString: string): { valid: boolean; message: string } {
    const date = new Date(dateString);
    const today = new Date();
    const minDate = new Date('1920-01-01');
    
    if (date < minDate) {
      return { valid: false, message: 'La fecha no puede ser anterior a 1920' };
    }
    
    if (date > today) {
      return { valid: false, message: 'La fecha no puede ser futura' };
    }
    
    const age = today.getFullYear() - date.getFullYear();
    const monthDiff = today.getMonth() - date.getMonth();
    
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < date.getDate())) {
      if (age - 1 < 18) {
        return { valid: false, message: 'Debes ser mayor de 18 años' };
      }
    } else if (age < 18) {
      return { valid: false, message: 'Debes ser mayor de 18 años' };
    }
    
    return { valid: true, message: 'Fecha válida' };
  }

  document.addEventListener('DOMContentLoaded', function() {
    const rutInput = document.getElementById('rut') as HTMLInputElement;
    const digitoVerificadorSpan = document.getElementById('digitoVerificador') as HTMLSpanElement;
    const dvInput = document.getElementById('dv') as HTMLInputElement;
    const fechaNacimientoInput = document.getElementById('fechaNacimiento') as HTMLInputElement;

    // Validación de contraseñas
    const password = document.getElementById('password') as HTMLInputElement;
    const confirmPassword = document.getElementById('confirmPassword') as HTMLInputElement;
    const passwordStrength = document.getElementById('passwordStrength') as HTMLDivElement;
    const strengthText = document.getElementById('strengthText') as HTMLParagraphElement;
    const passwordMatch = document.getElementById('passwordMatch') as HTMLSpanElement;
    const passwordMatchText = document.getElementById('passwordMatchText') as HTMLParagraphElement;
    
    // Validación de fortaleza de contraseña
    password?.addEventListener('input', function() {
      const value = password.value;
      
      if (value.length > 0) {
        passwordStrength.classList.remove('hidden');
        const strength = validatePasswordStrength(value);
        
        // Actualizar barras de fortaleza
        for (let i = 1; i <= 4; i++) {
          const bar = document.getElementById(`strength-${i}`) as HTMLDivElement;
          if (i <= strength.score) {
            bar.className = `h-1 flex-1 rounded ${strength.color}`;
          } else {
            bar.className = 'h-1 flex-1 rounded bg-gray-200';
          }
        }
        
        strengthText.textContent = `Fortaleza: ${strength.text}`;
        strengthText.className = `text-xs mt-1 ${strength.score >= 3 ? 'text-green-600' : 'text-gray-500'}`;
      } else {
        passwordStrength.classList.add('hidden');
      }
      
      // Validar coincidencia si hay contraseña de confirmación
      if (confirmPassword.value) {
        validatePasswordMatch();
      }
    });
    
    // Validación de coincidencia de contraseñas
    function validatePasswordMatch() {
      if (password && confirmPassword && password.value && confirmPassword.value) {
        if (password.value === confirmPassword.value) {
          confirmPassword.setCustomValidity('');
          confirmPassword.classList.remove('border-red-300');
          confirmPassword.classList.add('border-green-300');
          passwordMatch.innerHTML = '✓';
          passwordMatch.className = 'text-sm text-green-600';
          passwordMatchText.textContent = 'Las contraseñas coinciden';
          passwordMatchText.className = 'text-xs mt-2 text-green-600';
          passwordMatchText.classList.remove('hidden');
        } else {
          confirmPassword.setCustomValidity('Las contraseñas no coinciden');
          confirmPassword.classList.remove('border-green-300');
          confirmPassword.classList.add('border-red-300');
          passwordMatch.innerHTML = '✗';
          passwordMatch.className = 'text-sm text-red-600';
          passwordMatchText.textContent = 'Las contraseñas no coinciden';
          passwordMatchText.className = 'text-xs mt-2 text-red-600';
          passwordMatchText.classList.remove('hidden');
        }
      } else {
        passwordMatch.innerHTML = '';
        passwordMatchText.classList.add('hidden');
        confirmPassword.classList.remove('border-green-300', 'border-red-300');
      }
    }
    
    confirmPassword?.addEventListener('input', validatePasswordMatch);

    // Validación de fecha de nacimiento
    fechaNacimientoInput?.addEventListener('change', function() {
      const validation = validateBirthDate(fechaNacimientoInput.value);
      
      if (!validation.valid) {
        fechaNacimientoInput.classList.add('border-red-300');
        fechaNacimientoInput.setCustomValidity(validation.message);
      } else {
        fechaNacimientoInput.classList.remove('border-red-300');
        fechaNacimientoInput.classList.add('border-green-300');
        fechaNacimientoInput.setCustomValidity('');
      }
    });

    // Manejo del RUT con auto-cálculo del dígito verificador
    rutInput?.addEventListener('input', function(e) {
      const target = e.target as HTMLInputElement;
      let value = target.value;
      
      // Solo permitir números
      value = value.replace(/[^\d]/g, '');
      
      // Limitar a 8 dígitos máximo
      if (value.length > 8) {
        value = value.slice(0, 8);
      }
      
      // Formatear con puntos
      const rutFormateado = formatearRUT(value);
      target.value = rutFormateado;
      
      // Calcular y mostrar dígito verificador
      if (value.length >= 7) {
        const digitoVerificador = calcularDigitoVerificador(value);
        if (digitoVerificador) {
          // Mostrar dígito verificador en la UI
          digitoVerificadorSpan.textContent = `-${digitoVerificador}`;
          digitoVerificadorSpan.classList.add('text-teal-600');
          
          // Guardar dígito verificador en campo oculto
          dvInput.value = digitoVerificador;
          
          // Validación visual
          target.classList.remove('border-red-300');
          target.classList.add('border-green-300');
        }
      } else {
        // Limpiar dígito verificador
        digitoVerificadorSpan.textContent = '';
        dvInput.value = '';
        target.classList.remove('border-green-300', 'border-red-300');
      }
      
      // Validación de longitud mínima
      if (value.length > 0 && value.length < 7) {
        target.classList.add('border-red-300');
      }
    });

    // Prevenir zoom en iOS
    const inputs = document.querySelectorAll('input[type="text"], input[type="email"], input[type="tel"], input[type="password"], input[type="date"]');
    inputs.forEach(input => {
      input.addEventListener('focus', function() {
        const viewport = document.querySelector('meta[name="viewport"]');
        if (viewport) {
          viewport.setAttribute('content', 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no');
        }
      });
      
      input.addEventListener('blur', function() {
        const viewport = document.querySelector('meta[name="viewport"]');
        if (viewport) {
          viewport.setAttribute('content', 'width=device-width, initial-scale=1.0');
        }
      });
    });
  });
</script>

<style>
  /* Mejoras específicas para móvil */
  @media (max-width: 640px) {
    input[type="text"],
    input[type="email"],
    input[type="tel"],
    input[type="password"],
    input[type="date"] {
      font-size: 16px; 
    }
    
    button {
      -webkit-tap-highlight-color: transparent;
    }
  }

  /* Efectos visuales */
  .group:hover .absolute svg {
    color: #0d9488;
  }

  /* Estados de validación */
  input.border-red-300 {
    border-color: #fca5a5;
  }

  input.border-green-300 {
    border-color: #86efac;
  }

  /* Animación sutil en el logo */
  .bg-teal-600.rounded-full {
    animation: subtle-pulse 3s ease-in-out infinite;
  }

  @keyframes subtle-pulse {
    0%, 100% {
      transform: scale(1);
      box-shadow: 0 10px 25px rgba(13, 148, 136, 0.3);
    }
    50% {
      transform: scale(1.05);
      box-shadow: 0 15px 35px rgba(13, 148, 136, 0.4);
    }
  }

  /* Focus mejorado para accesibilidad */
  input:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(13, 148, 136, 0.1);
  }

  button:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(13, 148, 136, 0.3);
  }

  /* Estilo para el dígito verificador */
  #digitoVerificador {
    font-family: 'JetBrains Mono', 'SF Mono', 'Monaco', 'Inconsolata', 'Fira Code', monospace;
    font-weight: 700;
    font-size: 1.125rem;
  }
</style>
